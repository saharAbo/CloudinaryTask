{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deleteFromStorage = exports.writeStorage = exports.isTypeOfLocalStorageChanged = exports.LOCAL_STORAGE_CHANGE_EVENT_NAME = void 0;\n\nvar storage_1 = require(\"./storage\");\n\nvar is_browser_1 = require(\"./is-browser\");\n\nexports.LOCAL_STORAGE_CHANGE_EVENT_NAME = 'onLocalStorageChange';\n/**\n * CustomEvent polyfill derived from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n */\n\n(function () {\n  if (!is_browser_1.isBrowser()) {\n    return;\n  }\n\n  if (typeof global.window.CustomEvent === 'function') {\n    return;\n  }\n\n  function CustomEvent(typeArg, params) {\n    var _a, _b;\n\n    if (params === void 0) {\n      params = {\n        bubbles: false,\n        cancelable: false\n      };\n    }\n\n    var evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(typeArg, (_a = params === null || params === void 0 ? void 0 : params.bubbles) !== null && _a !== void 0 ? _a : false, (_b = params === null || params === void 0 ? void 0 : params.cancelable) !== null && _b !== void 0 ? _b : false, params === null || params === void 0 ? void 0 : params.detail);\n    return evt;\n  }\n\n  window.CustomEvent = CustomEvent;\n})();\n/**\n * Checks if the event that is passed in is the same type as LocalStorageChanged.\n *\n * @export\n * @template TValue\n * @param {*} evt the object you wish to assert as a onLocalStorageChange event.\n * @returns {evt is LOCAL_STORAGE_CHANGE_EVENT_NAME} if true, evt is asserted to be onLocalStorageChange.\n */\n\n\nfunction isTypeOfLocalStorageChanged(evt) {\n  return !!evt && evt.type === exports.LOCAL_STORAGE_CHANGE_EVENT_NAME;\n}\n\nexports.isTypeOfLocalStorageChanged = isTypeOfLocalStorageChanged;\n/**\n * Use this instead of directly using localStorage.setItem\n * in order to correctly send events within the same window.\n *\n * @example\n * ```js\n * writeStorage('hello', JSON.stringify({ name: 'world' }));\n * const { name } = JSON.parse(localStorage.getItem('hello'));\n * ```\n *\n * @export\n * @param {string} key The key to write to in the localStorage.\n * @param {string} value The value to write to in the localStorage.\n */\n\nfunction writeStorage(key, value) {\n  if (!is_browser_1.isBrowser()) {\n    return;\n  }\n\n  try {\n    storage_1.storage.setItem(key, typeof value === 'object' ? JSON.stringify(value) : \"\" + value);\n    window.dispatchEvent(new CustomEvent(exports.LOCAL_STORAGE_CHANGE_EVENT_NAME, {\n      detail: {\n        key: key,\n        value: value\n      }\n    }));\n  } catch (err) {\n    if (err instanceof TypeError && err.message.includes('circular structure')) {\n      throw new TypeError('The object that was given to the writeStorage function has circular references.\\n' + 'For more information, check here: ' + 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value');\n    }\n\n    throw err;\n  }\n}\n\nexports.writeStorage = writeStorage;\n/**\n * Use this function to delete a value from localStorage.\n *\n * After calling this function, the localStorage value will be null.\n *\n * @example\n * ```js\n * const user = { name: 'John', email: 'John@fakemail.com' };\n *\n * // Add a user to your localStorage\n * writeStorage('user', JSON.stringify(user));\n *\n * // This will also trigger an update to the state of your component\n * deleteFromStorage('user');\n *\n * localStorage.getItem('user') === null // ✔ This is now null\n * ```\n *\n * @export\n * @param {string} key The key of the item you wish to delete from localStorage.\n */\n\nfunction deleteFromStorage(key) {\n  if (!is_browser_1.isBrowser()) {\n    return;\n  }\n\n  storage_1.storage.removeItem(key);\n  window.dispatchEvent(new CustomEvent(exports.LOCAL_STORAGE_CHANGE_EVENT_NAME, {\n    detail: {\n      key: key,\n      value: null\n    }\n  }));\n}\n\nexports.deleteFromStorage = deleteFromStorage;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAEaA,0CAAkC,sBAAlC;AAEb;;;;AAGA,CAAC;EACG,IAAI,CAACC,wBAAL,EAAkB;IAChB;EACD;;EAED,IAAI,OAAOC,MAAM,CAACC,MAAP,CAAcC,WAArB,KAAqC,UAAzC,EAAqD;IACnD;EACD;;EAED,SAASA,WAAT,CACIC,OADJ,EAEIC,MAFJ,EAEsE;;;IAAlE;MAAAA;QAA+BC,OAAO,EAAE,KAAxC;QAA+CC,UAAU,EAAE;MAA3D;IAAkE;;IAElE,IAAMC,GAAG,GAAGC,QAAQ,CAACC,WAAT,CAAqB,aAArB,CAAZ;IACAF,GAAG,CAACG,eAAJ,CAAoBP,OAApB,EAA2B,MAAEC,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEC,OAAV,MAAiB,IAAjB,IAAiBM,aAAjB,GAAiBA,EAAjB,GAAqB,KAAhD,EAAqD,MAAEP,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEE,UAAV,MAAoB,IAApB,IAAoBM,aAApB,GAAoBA,EAApB,GAAwB,KAA7E,EAAoFR,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAES,MAA5F;IACA,OAAON,GAAP;EACH;;EAEDN,MAAM,CAACC,WAAP,GAAqBA,WAArB;AACH,CAnBD;AA0BA;;;;;;;;;;AAQA,SAAgBY,2BAAhB,CAAoDP,GAApD,EAAoE;EAChE,OAAO,CAAC,CAACA,GAAF,IAASA,GAAG,CAACQ,IAAJ,KAAajB,uCAA7B;AACH;;AAFDA;AAIA;;;;;;;;;;;;;;;AAcA,SAAgBkB,YAAhB,CAAqCC,GAArC,EAAkDC,KAAlD,EAA+D;EAC3D,IAAI,CAACnB,wBAAL,EAAkB;IACd;EACH;;EAED,IAAI;IACAoB,kBAAQC,OAAR,CAAgBH,GAAhB,EAAqB,OAAOC,KAAP,KAAiB,QAAjB,GAA4BG,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAA5B,GAAoD,KAAGA,KAA5E;IACAjB,MAAM,CAACsB,aAAP,CACE,IAAIrB,WAAJ,CAAgBJ,uCAAhB,EAAiD;MAC7Ce,MAAM,EAAE;QAAEI,GAAG,KAAL;QAAOC,KAAK;MAAZ;IADqC,CAAjD,CADF;EAKH,CAPD,CAOE,OAAOM,GAAP,EAAY;IACV,IAAIA,GAAG,YAAYC,SAAf,IAA4BD,GAAG,CAACE,OAAJ,CAAYC,QAAZ,CAAqB,oBAArB,CAAhC,EAA4E;MACxE,MAAM,IAAIF,SAAJ,CACF,sFACA,oCADA,GAEA,8FAHE,CAAN;IAKH;;IACD,MAAMD,GAAN;EACH;AACJ;;AAtBD1B;AAyBA;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAgB8B,iBAAhB,CAAkCX,GAAlC,EAA6C;EACzC,IAAI,CAAClB,wBAAL,EAAkB;IACd;EACH;;EAEDoB,kBAAQU,UAAR,CAAmBZ,GAAnB;EACAhB,MAAM,CAACsB,aAAP,CACE,IAAIrB,WAAJ,CAAgBJ,uCAAhB,EAAiD;IAC7Ce,MAAM,EAAE;MAAEI,GAAG,KAAL;MAAOC,KAAK,EAAE;IAAd;EADqC,CAAjD,CADF;AAKH;;AAXDpB","names":["exports","is_browser_1","global","window","CustomEvent","typeArg","params","bubbles","cancelable","evt","document","createEvent","initCustomEvent","_a","_b","detail","isTypeOfLocalStorageChanged","type","writeStorage","key","value","storage_1","setItem","JSON","stringify","dispatchEvent","err","TypeError","message","includes","deleteFromStorage","removeItem"],"sources":["C:\\Users\\AA\\Desktop\\NewOne\\node_modules\\@rehooks\\local-storage\\src\\local-storage-events.ts"],"sourcesContent":["import { storage } from './storage';\nimport { isBrowser } from './is-browser'\n\nexport const LOCAL_STORAGE_CHANGE_EVENT_NAME = 'onLocalStorageChange';\n\n/**\n * CustomEvent polyfill derived from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n */\n(() => {\n    if (!isBrowser()) {\n      return;\n    }\n\n    if (typeof global.window.CustomEvent === 'function') {\n      return;\n    }\n\n    function CustomEvent<T>(\n        typeArg: string,\n        params: CustomEventInit<T> = { bubbles: false, cancelable: false }\n    ): CustomEvent<T> {\n        const evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(typeArg, params?.bubbles ?? false, params?.cancelable ?? false, params?.detail);\n        return evt;\n    }\n\n    window.CustomEvent = CustomEvent as unknown as typeof window.CustomEvent;\n})();\n\nexport interface LocalStorageEventPayload<TValue> {\n    key: string;\n    value: TValue;\n}\n\n/**\n * Checks if the event that is passed in is the same type as LocalStorageChanged.\n *\n * @export\n * @template TValue\n * @param {*} evt the object you wish to assert as a onLocalStorageChange event.\n * @returns {evt is LOCAL_STORAGE_CHANGE_EVENT_NAME} if true, evt is asserted to be onLocalStorageChange.\n */\nexport function isTypeOfLocalStorageChanged<TValue>(evt: CustomEvent): boolean {\n    return !!evt && evt.type === LOCAL_STORAGE_CHANGE_EVENT_NAME\n}\n\n/**\n * Use this instead of directly using localStorage.setItem\n * in order to correctly send events within the same window.\n *\n * @example\n * ```js\n * writeStorage('hello', JSON.stringify({ name: 'world' }));\n * const { name } = JSON.parse(localStorage.getItem('hello'));\n * ```\n *\n * @export\n * @param {string} key The key to write to in the localStorage.\n * @param {string} value The value to write to in the localStorage.\n */\nexport function writeStorage<TValue>(key: string, value: TValue) {\n    if (!isBrowser()) {\n        return;\n    }\n\n    try {\n        storage.setItem(key, typeof value === 'object' ? JSON.stringify(value) : `${value}`);\n        window.dispatchEvent(\n          new CustomEvent(LOCAL_STORAGE_CHANGE_EVENT_NAME, {\n              detail: { key, value },\n          })\n        )\n    } catch (err) {\n        if (err instanceof TypeError && err.message.includes('circular structure')) {\n            throw new TypeError(\n                'The object that was given to the writeStorage function has circular references.\\n' +\n                'For more information, check here: ' +\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value'\n            );\n        }\n        throw err;\n    }\n}\n\n\n/**\n * Use this function to delete a value from localStorage.\n *\n * After calling this function, the localStorage value will be null.\n *\n * @example\n * ```js\n * const user = { name: 'John', email: 'John@fakemail.com' };\n *\n * // Add a user to your localStorage\n * writeStorage('user', JSON.stringify(user));\n *\n * // This will also trigger an update to the state of your component\n * deleteFromStorage('user');\n *\n * localStorage.getItem('user') === null // ✔ This is now null\n * ```\n *\n * @export\n * @param {string} key The key of the item you wish to delete from localStorage.\n */\nexport function deleteFromStorage(key: string) {\n    if (!isBrowser()) {\n        return;\n    }\n\n    storage.removeItem(key);\n    window.dispatchEvent(\n      new CustomEvent(LOCAL_STORAGE_CHANGE_EVENT_NAME, {\n          detail: { key, value: null },\n      })\n    )\n}\n"]},"metadata":{},"sourceType":"script"}
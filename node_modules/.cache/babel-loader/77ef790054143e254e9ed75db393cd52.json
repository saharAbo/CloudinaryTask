{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useLocalStorage = void 0;\n\nvar local_storage_events_1 = require(\"./local-storage-events\");\n\nvar is_browser_1 = require(\"./is-browser\");\n\nvar storage_1 = require(\"./storage\");\n\nvar react_1 = require(\"react\");\n/**\n * This exists for trying to serialize the value back to JSON.\n * If it cannot serialize it, then it was a string value given.\n *\n * @param value the value you wish to try to parse\n */\n\n\nfunction tryParse(value) {\n  try {\n    return JSON.parse(value);\n  } catch (_a) {\n    return value;\n  }\n}\n\nfunction useLocalStorage(key, defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = null;\n  }\n\n  var _a = react_1.useState(storage_1.storage.getItem(key) === null ? defaultValue : tryParse(storage_1.storage.getItem(key))),\n      localState = _a[0],\n      updateLocalState = _a[1];\n\n  var onLocalStorageChange = react_1.useCallback(function (event) {\n    // An event value can be of TValue when `localStorage.setItem` is called, or null when\n    // `localStorage.removeItem` is called.\n    if (local_storage_events_1.isTypeOfLocalStorageChanged(event)) {\n      if (event.detail.key === key) {\n        updateLocalState(event.detail.value);\n      }\n    } else {\n      if (event.key === key) {\n        updateLocalState(event.newValue === null ? null : tryParse(event.newValue));\n      }\n    }\n  }, [updateLocalState, key]);\n  react_1.useEffect(function () {\n    if (!is_browser_1.isBrowser()) {\n      return;\n    } // The custom storage event allows us to update our component\n    // when a change occurs in localStorage outside of our component\n\n\n    var listener = function (e) {\n      onLocalStorageChange(e);\n    };\n\n    window.addEventListener(local_storage_events_1.LOCAL_STORAGE_CHANGE_EVENT_NAME, listener); // The storage event only works in the context of other documents (eg. other browser tabs)\n\n    window.addEventListener('storage', listener); // Write default value to the local storage if there currently isn't any value there.\n    // Don't however write a defaultValue that is null otherwise it'll trigger infinite updates.\n\n    if (storage_1.storage.getItem(key) === null && defaultValue !== null) {\n      local_storage_events_1.writeStorage(key, defaultValue);\n    }\n\n    return function () {\n      window.removeEventListener(local_storage_events_1.LOCAL_STORAGE_CHANGE_EVENT_NAME, listener);\n      window.removeEventListener('storage', listener);\n    };\n  }, [key, defaultValue, onLocalStorageChange]);\n  var writeState = react_1.useCallback(function (value) {\n    return local_storage_events_1.writeStorage(key, value);\n  }, [key]);\n  var deleteState = react_1.useCallback(function () {\n    return local_storage_events_1.deleteFromStorage(key);\n  }, [key]);\n  var state = localState !== null && localState !== void 0 ? localState : defaultValue;\n  return [state, writeState, deleteState];\n}\n\nexports.useLocalStorage = useLocalStorage;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAMA;;AACA;;AACA;AAEA;;;;;;;;AAMA,SAASA,QAAT,CAAkBC,KAAlB,EAA+B;EAC7B,IAAI;IACF,OAAOC,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAP;EACD,CAFD,CAEE,WAAM;IACN,OAAOA,KAAP;EACD;AACF;;AA+BD,SAAgBG,eAAhB,CACEC,GADF,EAEEC,YAFF,EAEoC;EAAlC;IAAAA;EAAkC;;EAE5B,SAAiCC,iBACrCC,kBAAQC,OAAR,CAAgBJ,GAAhB,MAAyB,IAAzB,GACIC,YADJ,GAEIN,QAAQ,CAACQ,kBAAQC,OAAR,CAAgBJ,GAAhB,CAAD,CAHyB,CAAjC;EAAA,IAACK,UAAU,QAAX;EAAA,IAAaC,gBAAgB,QAA7B;;EAMN,IAAMC,oBAAoB,GAAGL,oBAAY,UAACM,KAAD,EAA0B;IACjE;IACA;IACA,IAAIC,mDAAoCD,KAApC,CAAJ,EAAgD;MAC9C,IAAIA,KAAK,CAACE,MAAN,CAAaV,GAAb,KAAqBA,GAAzB,EAA8B;QAC5BM,gBAAgB,CAACE,KAAK,CAACE,MAAN,CAAad,KAAd,CAAhB;MACD;IACF,CAJD,MAIO;MACL,IAAIY,KAAK,CAACR,GAAN,KAAcA,GAAlB,EAAuB;QACrBM,gBAAgB,CAACE,KAAK,CAACG,QAAN,KAAmB,IAAnB,GAA0B,IAA1B,GAAiChB,QAAQ,CAACa,KAAK,CAACG,QAAP,CAA1C,CAAhB;MACD;IACF;EACF,CAZ4B,EAY1B,CAACL,gBAAD,EAAmBN,GAAnB,CAZ0B,CAA7B;EAcAE,kBAAU;IACR,IAAI,CAACU,wBAAL,EAAkB;MAChB;IACD,CAHO,CAKR;IACA;;;IACA,IAAMC,QAAQ,GAAG,UAACC,CAAD,EAAS;MACxBP,oBAAoB,CAACO,CAAD,CAApB;IACD,CAFD;;IAIAC,MAAM,CAACC,gBAAP,CAAwBP,sDAAxB,EAAyDI,QAAzD,EAXQ,CAaR;;IACAE,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCH,QAAnC,EAdQ,CAgBR;IACA;;IACA,IAAIV,kBAAQC,OAAR,CAAgBJ,GAAhB,MAAyB,IAAzB,IAAiCC,YAAY,KAAK,IAAtD,EAA4D;MAC1DQ,oCAAaT,GAAb,EAAkBC,YAAlB;IACD;;IAED,OAAO;MACLc,MAAM,CAACE,mBAAP,CAA2BR,sDAA3B,EAA4DI,QAA5D;MACAE,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCJ,QAAtC;IACD,CAHD;EAID,CA1BD,EA0BG,CAACb,GAAD,EAAMC,YAAN,EAAoBM,oBAApB,CA1BH;EA4BA,IAAMW,UAAU,GAAGhB,oBAAY,UAACN,KAAD,EAAc;IAAK,2CAAaI,GAAb,EAAkBJ,KAAlB;EAAwB,CAAvD,EAAyD,CAACI,GAAD,CAAzD,CAAnB;EACA,IAAMmB,WAAW,GAAGjB,oBAAY;IAAM,gDAAkBF,GAAlB;EAAsB,CAAxC,EAA0C,CAACA,GAAD,CAA1C,CAApB;EACA,IAAMoB,KAAK,GAAkBf,UAAU,SAAV,cAAU,WAAV,gBAAcJ,YAA3C;EAEA,OAAO,CAACmB,KAAD,EAAQF,UAAR,EAAoBC,WAApB,CAAP;AACD;;AAzDDE","names":["tryParse","value","JSON","parse","useLocalStorage","key","defaultValue","react_1","storage_1","getItem","localState","updateLocalState","onLocalStorageChange","event","local_storage_events_1","detail","newValue","is_browser_1","listener","e","window","addEventListener","removeEventListener","writeState","deleteState","state","exports"],"sources":["C:\\Users\\AA\\Desktop\\NewOne\\node_modules\\@rehooks\\local-storage\\src\\use-localstorage.ts"],"sourcesContent":["import {\n  writeStorage,\n  deleteFromStorage,\n  isTypeOfLocalStorageChanged,\n  LOCAL_STORAGE_CHANGE_EVENT_NAME,\n} from './local-storage-events';\nimport { isBrowser } from './is-browser'\nimport { storage  } from './storage'\nimport { useEffect, useState, useCallback } from 'react';\n\n/**\n * This exists for trying to serialize the value back to JSON.\n * If it cannot serialize it, then it was a string value given.\n *\n * @param value the value you wish to try to parse\n */\nfunction tryParse(value: string) {\n  try {\n    return JSON.parse(value);\n  } catch {\n    return value;\n  }\n}\n\nexport type LocalStorageNullableReturnValue<TValue> = [TValue | null, (newValue: TValue | null) => void, () => void];\nexport type LocalStorageReturnValue<TValue> = [TValue, (newValue: TValue | null) => void, () => void];\n\n/**\n * React hook to enable updates to state via localStorage.\n * This updates when the {writeStorage} function is used, when the returned function\n * is called, or when the \"storage\" event is fired from another tab in the browser.\n * This function takes an optional default value to start off with.\n *\n * @example\n * ```js\n * const MyComponent = () => {\n *   const [myStoredItem, setMyStoredItem] = useLocalStorage('myStoredItem');\n *   return (\n *     <p>{myStoredItem}</p>\n *   );\n * };\n * ```\n *\n * @export\n * @template TValue The type of the given default value.\n * @param {string} key The key in the localStorage that you wish to watch.\n * @param {TValue} defaultValue Optional default value to start with.\n * @returns {[TValue | null, Dispatch<TValue>, Dispatch<void>]} An array containing the value\n * associated with the key in position 0, a function to set the value in position 1,\n * and a function to delete the value from localStorage in position 2.\n */\nexport function useLocalStorage<TValue = string>(key: string): LocalStorageNullableReturnValue<TValue>;\nexport function useLocalStorage<TValue = string>(key: string, defaultValue: TValue): LocalStorageReturnValue<TValue>;\nexport function useLocalStorage<TValue = string>(\n  key: string,\n  defaultValue: TValue | null = null,\n) {\n  const [localState, updateLocalState] = useState<TValue | null>(\n    storage.getItem(key) === null\n      ? defaultValue\n      : tryParse(storage.getItem(key)!)\n  );\n\n  const onLocalStorageChange = useCallback((event: any | StorageEvent) => {\n    // An event value can be of TValue when `localStorage.setItem` is called, or null when\n    // `localStorage.removeItem` is called.\n    if (isTypeOfLocalStorageChanged<TValue>(event)) {\n      if (event.detail.key === key) {\n        updateLocalState(event.detail.value);\n      }\n    } else {\n      if (event.key === key) {\n        updateLocalState(event.newValue === null ? null : tryParse(event.newValue));\n      }\n    }\n  }, [updateLocalState, key]);\n\n  useEffect(() => {\n    if (!isBrowser()) {\n      return\n    }\n\n    // The custom storage event allows us to update our component\n    // when a change occurs in localStorage outside of our component\n    const listener = (e: Event) => {\n      onLocalStorageChange(e)\n    };\n\n    window.addEventListener(LOCAL_STORAGE_CHANGE_EVENT_NAME, listener);\n\n    // The storage event only works in the context of other documents (eg. other browser tabs)\n    window.addEventListener('storage', listener);\n\n    // Write default value to the local storage if there currently isn't any value there.\n    // Don't however write a defaultValue that is null otherwise it'll trigger infinite updates.\n    if (storage.getItem(key) === null && defaultValue !== null) {\n      writeStorage(key, defaultValue);\n    }\n\n    return () => {\n      window.removeEventListener(LOCAL_STORAGE_CHANGE_EVENT_NAME, listener);\n      window.removeEventListener('storage', listener);\n    };\n  }, [key, defaultValue, onLocalStorageChange]);\n\n  const writeState = useCallback((value: TValue) => writeStorage(key, value), [key]);\n  const deleteState = useCallback(() => deleteFromStorage(key), [key]);\n  const state: TValue | null = localState ?? defaultValue;\n\n  return [state, writeState, deleteState];\n}\n"]},"metadata":{},"sourceType":"script"}